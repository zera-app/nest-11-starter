// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  email             String             @unique @db.VarChar(255)
  password          String             @db.VarChar(255)
  name              String?            @db.VarChar(100)
  emailVerifiedAt   DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  roles             RoleUser[]
  emailVerifications EmailVerification[]
  accessTokens      AccessToken[]
  resetToken        ResetToken[]

  @@index([email])
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique @db.VarChar(50)
  scope       String?          @db.VarChar(50) // backend app, admin app, frontend app, etc. if null all apps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  users       RoleUser[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique @db.VarChar(50)
  module      String?          @db.VarChar(15)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  roles       RolePermission[]
}

model RoleUser {
  userId    String  @db.Uuid
  roleId    String  @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RolePermission {
  roleId       String   @db.Uuid
  permissionId String  @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model EmailVerification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique @db.VarChar(255)
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessToken {
  id          String    @id @default(uuid()) @db.Uuid
  token       String    @db.VarChar(255)
  userId      String   @db.Uuid
  name        String?   @db.VarChar(100)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model ResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
